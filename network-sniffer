#!/usr/bin/python3
import socket
import struct
from scapy.all import wrpcap, PacketList
import argparse

captured_packets = PacketList()
eth_proto_type = {0x0800: "IPv4", 0x86dd: "IPv6", 0x0806: "ARP"}
ip_proto_type  = {1:"ICMP", 2:"IGMP", 6: "TCP", 17: "UDP"} 
icmp_type = {0:"Echo Reply", 3:"Destination Unreachable", 5: "Message Redirect", 8:"Echo Request", 9:"Router Advertisement", 10: "Router Solicitation", 11:"Time Exceeded", 12:"Parameter Problem", 13:"Timestamp", 14:"Timestamp Reply"}

def get_tcp_flags(flag):
    flags = []
    flag = flag[::-1]
    
    if flag[0]=='1':
        flags.append("FIN")
    elif flag[1]=='1':
        flags.append("SYN")
    elif flag[2]=='1':
        flags.append("RST")
    elif flag[3]=='1':
        flags.append("PSH")
    elif flag[4]=='1':
        flags.append("ACK")
    else:
        flags.append("URG")

    return flags    

def create_socket(interface):
    try:
        s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(0x0003))
        if interface!="any":
            s.bind((interface,0))
        return s
    except PermissionError:
        print("Need sudo priviledges fror running this program")
        exit()
    except OSError:
        print(f"Error: Interface '{interface}' not found.")
        exit()

def parse_ethernet_header(packet):
    eth_header = struct.unpack("!6s6sH",packet[:14])
    dest_mac = ":".join(f"{b:02x}" for b in eth_header[0]) 
    src_mac = ":".join(f"{b:02x}" for b in eth_header[1])
    eth_type = eth_header[2]
    return dest_mac, src_mac, eth_type, packet[14:]

def parse_ip4_header(packet):
    ip_header = struct.unpack("!BBHHHBBH4s4s",packet[:20])
    version = ip_header[0] >> 4
    header_length = ip_header[0] & 15
    ds = ip_header[1]
    total_length = ip_header[2]
    identification = ip_header[3]
    flags = ip_header[4] >> 5
    fragment_offset = ip_header[4] & 31
    ttl = ip_header[5]
    protocol = ip_header[6]
    header_checksum = ip_header[7]
    src_ip = socket.inet_ntoa(ip_header[8])
    dest_ip = socket.inet_ntoa(ip_header[9])
    return version, header_length, ds, total_length, identification, flags, fragment_offset, ttl, protocol, header_checksum, src_ip, dest_ip, packet[20:]

def parse_tcp_header(packet):
    tcp_header = struct.unpack("!HH4s4sHHHH",packet[:20])
    src_port = tcp_header[0]
    dest_port = tcp_header[1]
    seq_no = tcp_header[2]
    ack_no = tcp_header[3]
    header_length = tcp_header[4] >> 12
    reserved = (tcp_header[4] >> 6) & 63
    control_bits = tcp_header[4] & 63
    window = tcp_header[5]
    checksum = tcp_header[6]
    urgent = tcp_header[7]
    return src_port, dest_port, seq_no, ack_no, header_length, reserved, control_bits, window, checksum, urgent, packet[20:]

def parse_udp_header(packet):
    udp_header = struct.unpack("!HHHH",packet[:8])
    src_port = udp_header[0]
    dest_port = udp_header[1]
    length = udp_header[2]
    checksum = udp_header[3]
    return src_port, dest_port, length, checksum, packet[8:]

def parse_icmp_header(packet):
    icmp_header = struct.unpack("!BBH4s",packet[:8])
    _type = icmp_header[0]
    code = icmp_header[1]
    checksum = icmp_header[2]
    extended_header = icmp_header[3]
    return _type, code, checksum, extended_header, packet[8:]
    
def save_packets(filename):
    if captured_packets:
        wrpcap(filename+".pcapng", captured_packets)
        print(f"Packets saved to '{filename}.pcapng'.")
    else:
        print("No packets captured.")

def sniff_packets(interface):
    sock = create_socket(interface)
    print("\nListening for network packets... (Press Ctrl+C to stop)")

    try:
        while True:
            raw_packet, _ = sock.recvfrom(65536)
            captured_packets.append(raw_packet)

            print("\n===================================================================================")
            #parse Ethernet header
            dest_mac, src_mac, eth_type, l3_packet = parse_ethernet_header(raw_packet)
            print(f"[Ethernet] Src MAC: {src_mac}, Dest MAC: {dest_mac}, Type: {eth_proto_type[eth_type]}")

            #parse IPv4 header
            if eth_proto_type[eth_type] == "IPv4":
                version, header_length, ds, total_length, identification, flags, fragment_offset, ttl, protocol, header_checksum, src_ip, dest_ip, l4_packet = parse_ip4_header(l3_packet)
                print(f"[IPv4] Src IP: {src_ip}, Dest IP: {dest_ip}, Protocol: {ip_proto_type[protocol]}, TTL: {ttl}")

                #parse TCP header
                if ip_proto_type[protocol] == "TCP":
                    src_port, dest_port, seq_no, ack_no, header_length, reserved, control_bits, window, checksum, urgent, data = parse_tcp_header(l4_packet)
                    control_bits = format(control_bits,'06b')
                    print(f"[TCP] Src Port: {src_port}, Dest Port: {dest_port}, Flags: {get_tcp_flags(control_bits)}")
                #parse UDP header
                elif ip_proto_type[protocol] == "UDP":
                    src_port, dest_port, length, checksum, data = parse_udp_header(l4_packet)
                    print(f"[UDP] Src Port: {src_port}, Dest Port: {dest_port}")
                #parse ICMP header
                elif ip_proto_type[protocol] == "ICMP":
                    _type, code, checksum, extended_header, data = parse_icmp_header(l4_packet)
                    print(f"[ICMP] Type: {icmp_type[_type]}, Code: {code}")
            print("===================================================================================")
    except KeyboardInterrupt:
        print("\nStopping packet sniffing...")
        sock.close()

if __name__=="__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--interface", help = "select the INTERFACE to listen on")
    parser.add_argument("-o", "--output", help = "save packet capture to OUTPUT.pcapng file")
    args = parser.parse_args()
    if args.interface:
        sniff_packets(args.interface)
    else:
        print("No interface provided!")
        print("Note: To listen on all interfaces use `-i any`")
        exit()
    if args.output:
        save_packets(args.output)
